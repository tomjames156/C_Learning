<stdio.h> is a header file library that allows the use of simple input and output functons

The name given to a variable is called an identifier


char - 1 byte - %c
int - 2/4 bytes no decimals - %d/%i
float - 4 bytes 6-7 dp - %f
double - 8 bytes up to 15 dp - %lf

string - %s 

Type Conversion

- This is changing from one data type to another. It can be implicit or automatic e.g when you declare an int data type but provide a float value (the float val is automatically converted to an integer). Explicit you specify the data type you want it to be my specifying it in parentheses

Operators; arithmetic, assignment, bitwise, comparison, logical

increment operator can be used before or after the variable 

^ (X0R), << (left shift), >> (right shift), & (and), | (or)


Strings are a sequence of characters terminated by a null terminator at the end \0
So basically a string with 5 characters actually takes up 6 spaces in the memory because of the extra \0 character. Strings are always enclosed in double quotes.

char name[no] = "String";
and they are accessed using %s

The assignment operator can only be used on strings when declaring the string. Strings can still be assigned values by scanf

gets() and puts() are used to assign a value to a string and display a string value respectively.
fgets() reads an entire line of a string and it requires 3 args fgets(stringVarName, strlength, stdin)
stdin (Standard Input) is a file pointer in c. It's a stream from which the program reads input

You can pass strings as arguments to a function. Just declare the function and indicate that a string would be passed there.

Manipulating strings can be done using string.h library which has functions for string manipulation. 
strcat(dest, source) - (String Concatenation) adds 2 strings together, 
strlen(str) - gets string length without the null terminator. the output is an unsigned integer referenced with "%zu", 
strcpy(dest, source)-(copies the string and its null terminator)
strcmp(str1, str2) - compares 2 strings to see if they are the same. If the same returns 0, else returns a different value.


NOTE:
1. In C now you have to declare the number of characters for the string first if you're not going to assign the value immediately
2. The & reference operator for assigning to a var in scanf is unnecessary for strings.
3. gets() is actually an unsafe function because it allows the user to input any number of chars hence causing a buffer overflow
4. the length of string you use in fgets() should be the actual length of the string + 1;