<stdio.h> is a header file library that allows the use of simple input and output functons

The name given to a variable is called an identifier


char - 1 byte - %c
int - 2/4 bytes no decimals - %d/%i
float - 4 bytes 6-7 dp - %f
double - 8 bytes up to 15 dp - %lf

string - %s 

Type Conversion

- This is changing from one data type to another. It can be implicit or automatic e.g when you declare an int data type but provide a float value (the float val is automatically converted to an integer). Explicit you specify the data type you want it to be my specifying it in parentheses

Operators; arithmetic, assignment, bitwise, comparison, logical

increment operator can be used before or after the variable 

^ (X0R), << (left shift), >> (right shift), & (and), | (or)


STRINGS

Strings are a sequence of characters terminated by a null terminator at the end \0
So basically a string with 5 characters actually takes up 6 spaces in the memory because of the extra \0 character. Strings are always enclosed in double quotes.

char name[no] = "String";
and they are accessed using %s

The assignment operator can only be used on strings when declaring the string. Strings can still be assigned values by scanf. However, scanf reads the string until it encounters some whitespace e.g space, linebreak etc

gets() and puts() are used to assign a value to a string and display a string value respectively.
fgets() and gets() can read an entire line of a string and it requires 3 args fgets(stringVarName, strlength, stdin)
stdin (Standard Input) is a file pointer in c. It's a stream from which the program reads input

You can pass strings as arguments to a function. Just declare the function and indicate that a string would be passed there.

Manipulating strings can be done using string.h library which has functions for string manipulation. 
strcat(dest, source) - (String Concatenation) adds 2 strings together, 
strlen(str) - gets string length without the null terminator. the output is an unsigned integer referenced with "%zu" z- length modifier and u- unsigned type, 
strcpy(dest, source)-(copies the string and its null terminator)
strcmp(str1, str2) - compares 2 strings to see if they are the same. If the same returns 0, else returns a different value.


STRUCTURES

Structure is a collection of multiple variables of possibly dissimilar data types stored under a single variable name. In C and C++. Its similar to a class in Java and C++ but without methods. 

The variables stored in the struct are called members and are similar to a field of a class in Java.

struct structName{
    dataType varname; (member)
    dataType varname;
    dataType varname;
};

Struct variables can be declared by the side of the struct declaration before the semicolon using;
struct structName struct1, struct2, struct3;

Structure variables are accessed using dot notation

Structure variables can be assigned values with the assignment operator and curly braces which contain the members in order e.g

struct coordinate{
    float x;
    float y;
};

struct coordinate home = {13, 13};

you can have an array of structure just declare it in the same way you declare struct variables but with the square brackets and the number of struct vars to be declared e.g struct book books[10] i.e 10 struct variables which are books.

NOTE:
1. In C now you have to declare the number of characters for the string first if you're not going to assign the value immediately
2. The & reference operator for assigning to a var in scanf is unnecessary for strings.
3. gets() is actually an unsafe function because it allows the user to input any number of chars hence causing a buffer overflow
4. the length of string you use in fgets() should be the actual length of the string + 1;
5. When getting char or string input leave a space before the quotes to avoid getting errors.
6. fgets() always adds some linebreak after the text while gets() does not.
7. %.nf always approximates to the nearest figure based on equal to >= 5
8. to directly give a struct values, you need to declare the whole struct variable like so: struct structName varName = {member1, member2}